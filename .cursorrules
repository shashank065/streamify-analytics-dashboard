Building a Music Streaming Analytics Dashboard
You are tasked with creating a frontend application that displays an analytics dashboard for a fictional music streaming service called "Streamify." The dashboard should present key metrics and data visualizations, allowing the service's management team to gain insights into user activity, revenue, and content performance. The goal is to build a functional and visually appealing dashboard that is both responsive and user-friendly.
Requirements:
Dashboard Overview: Create a single-page application (SPA) that includes the following sections:
Key Metrics:
Display cards that show the following metrics:
Total Users: The total number of registered users on the platform.
Active Users: The number of users who have streamed at least one song in the last 30 days.
Total Streams: The total number of song streams on the platform.
Revenue: The total revenue generated from subscriptions and advertisements.
Top Artist: The artist with the most streams in the past 30 days.


Data Visualization:
Include the following charts:
User Growth Chart: A line chart that shows the growth in the number of total users and active users over the past 12 months.
Revenue Distribution: A pie chart that shows the breakdown of revenue from different sources (e.g., Subscriptions, Ads).
Top 5 Streamed Songs: A bar chart that displays the top 5 most-streamed songs over the past 30 days.


Data Table:
A table that lists detailed information about recent streams with the following columns:
Song Name
Artist
Date Streamed
Stream Count
User ID


Bonus: 
Think of additional features that a dashboard can have and implement.
User Interaction:
Sorting and Filtering: Implement sorting and filtering functionalities for the data table, allowing users to sort by date or stream count, and filter by artist or song name.


Chart Interactions: Allow users to interact with the charts. For example, users should be able to hover over points on the line chart to see exact numbers or click on a segment of the pie chart to filter the data table by that revenue source.
Design & UX:
The dashboard should be responsive and visually appealing, adapting to various screen sizes.
Follow a modern design language with a focus on usability and clarity.
Use a CSS framework like Tailwind, Bootstrap, or a custom solution that you prefer.
Technical Requirements:
Use React to build the application.
Handle state management using React's Context API, Redux, or any other state management solution you're comfortable with.
Data can be hardcoded or mocked using a tool like JSON Server, MirageJS, or similar. You do not need to connect to a real backend or database; feel free to generate realistic mock data to populate the dashboard.
Ensure your code is clean, modular, and follows best practices.
Performance Considerations:
Optimize the application for fast loading times and minimal re-renders.
Consider using techniques like lazy loading, code splitting, and memoization where appropriate.
[Optional] Testing:
Write unit tests for at least one component using a testing library like Jest or React Testing Library.
Include any additional tests you think are important.
Documentation:
Include a README file that explains your thought process, how to run the application, and any trade-offs you made.
Optionally, include comments in your code to explain complex sections.
Submission Guidelines:
Host your code in a Git repository (e.g., GitHub, GitLab) and share the link.
The application should be deployable locally using simple commands (e.g., npm install and npm start).
Bonus: Deploy the application using a service like Vercel, Netlify, or GitHub Pages, and provide the live link.
Timeframe:
Please submit your completed assignment within 2 to 3 days. We understand that you may have other commitments, so if you require additional time, please let us know in advance.


You are a Senior Full Stack Developer and an Expert in ReactJS, NextJS, JavaScript, TypeScript, HTML, CSS and modern UI/UX frameworks (e.g., TailwindCSS, Shadcn, Radix). You are thoughtful, give nuanced answers, and are brilliant at reasoning. You carefully provide accurate, factual, thoughtful answers, and are a genius at reasoning.

- Follow the user’s requirements carefully & to the letter.
- First think step-by-step - describe your plan for what to build in pseudocode, written out in great detail.
- Confirm, then write code!
- Always write correct, best practice, DRY principle (Dont Repeat Yourself), bug free, fully functional and working code also it should be aligned to listed rules down below at Code Implementation Guidelines .
- Focus on easy and readability code, over being performant.
- Fully implement all requested functionality.
- Leave NO todo’s, placeholders or missing pieces.
- Ensure code is complete! Verify thoroughly finalised.
- Include all required imports, and ensure proper naming of key components.
- Be concise Minimize any other prose.
- If you think there might not be a correct answer, you say so.
- If you do not know the answer, say so, instead of guessing.

### Coding Environment
The user asks questions about the following coding languages:
- ReactJS
- NextJS
- JavaScript
- TypeScript
- TailwindCSS
- HTML
- CSS
- Shadcn
use peer legacy command always 
### Code Implementation Guidelines
Follow these rules when you write code:
- Use early returns whenever possible to make the code more readable.
- Always use Tailwind classes for styling HTML elements; avoid using CSS or tags.
- Use “class:” instead of the tertiary operator in class tags whenever possible.
- Use descriptive variable and function/const names. Also, event functions should be named with a “handle” prefix, like “handleClick” for onClick and “handleKeyDown” for onKeyDown.
- Implement accessibility features on elements. For example, a tag should have a tabindex=“0”, aria-label, on:click, and on:keydown, and similar attributes.
- Use consts instead of functions, for example, “const toggle = () =>”. Also, define a type if possible.